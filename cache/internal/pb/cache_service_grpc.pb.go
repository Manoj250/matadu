// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: cache_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CacheService_RegisterServer_FullMethodName          = "/cache.cache_service/RegisterServer"
	CacheService_UnRegisterServer_FullMethodName        = "/cache.cache_service/UnRegisterServer"
	CacheService_GetServerLoad_FullMethodName           = "/cache.cache_service/GetServerLoad"
	CacheService_SetServerLoad_FullMethodName           = "/cache.cache_service/SetServerLoad"
	CacheService_RegisterUserToCache_FullMethodName     = "/cache.cache_service/RegisterUserToCache"
	CacheService_UnRegisterUserFromCache_FullMethodName = "/cache.cache_service/UnRegisterUserFromCache"
	CacheService_GetUserFromCache_FullMethodName        = "/cache.cache_service/GetUserFromCache"
	CacheService_RegisterUserToChat_FullMethodName      = "/cache.cache_service/RegisterUserToChat"
	CacheService_UnRegisterUserFromChat_FullMethodName  = "/cache.cache_service/UnRegisterUserFromChat"
	CacheService_GetUsersByChatId_FullMethodName        = "/cache.cache_service/GetUsersByChatId"
)

// CacheServiceClient is the client API for CacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CacheServiceClient interface {
	RegisterServer(ctx context.Context, in *ServerDetails, opts ...grpc.CallOption) (*CommonResponse, error)
	UnRegisterServer(ctx context.Context, in *ServerDetails, opts ...grpc.CallOption) (*CommonResponse, error)
	GetServerLoad(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetServerLoadResponse, error)
	SetServerLoad(ctx context.Context, in *SetServerLoadRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	RegisterUserToCache(ctx context.Context, in *UserDetails, opts ...grpc.CallOption) (*CommonResponse, error)
	UnRegisterUserFromCache(ctx context.Context, in *UserDetails, opts ...grpc.CallOption) (*CommonResponse, error)
	GetUserFromCache(ctx context.Context, in *UserDetails, opts ...grpc.CallOption) (*UserDetails, error)
	RegisterUserToChat(ctx context.Context, in *UserToChat, opts ...grpc.CallOption) (*CommonResponse, error)
	UnRegisterUserFromChat(ctx context.Context, in *UserToChat, opts ...grpc.CallOption) (*CommonResponse, error)
	GetUsersByChatId(ctx context.Context, in *ChatDetails, opts ...grpc.CallOption) (*UsersByChatIdResponse, error)
}

type cacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheServiceClient(cc grpc.ClientConnInterface) CacheServiceClient {
	return &cacheServiceClient{cc}
}

func (c *cacheServiceClient) RegisterServer(ctx context.Context, in *ServerDetails, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CacheService_RegisterServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) UnRegisterServer(ctx context.Context, in *ServerDetails, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CacheService_UnRegisterServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) GetServerLoad(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetServerLoadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerLoadResponse)
	err := c.cc.Invoke(ctx, CacheService_GetServerLoad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) SetServerLoad(ctx context.Context, in *SetServerLoadRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CacheService_SetServerLoad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) RegisterUserToCache(ctx context.Context, in *UserDetails, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CacheService_RegisterUserToCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) UnRegisterUserFromCache(ctx context.Context, in *UserDetails, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CacheService_UnRegisterUserFromCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) GetUserFromCache(ctx context.Context, in *UserDetails, opts ...grpc.CallOption) (*UserDetails, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDetails)
	err := c.cc.Invoke(ctx, CacheService_GetUserFromCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) RegisterUserToChat(ctx context.Context, in *UserToChat, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CacheService_RegisterUserToChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) UnRegisterUserFromChat(ctx context.Context, in *UserToChat, opts ...grpc.CallOption) (*CommonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CacheService_UnRegisterUserFromChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheServiceClient) GetUsersByChatId(ctx context.Context, in *ChatDetails, opts ...grpc.CallOption) (*UsersByChatIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersByChatIdResponse)
	err := c.cc.Invoke(ctx, CacheService_GetUsersByChatId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServiceServer is the server API for CacheService service.
// All implementations must embed UnimplementedCacheServiceServer
// for forward compatibility.
type CacheServiceServer interface {
	RegisterServer(context.Context, *ServerDetails) (*CommonResponse, error)
	UnRegisterServer(context.Context, *ServerDetails) (*CommonResponse, error)
	GetServerLoad(context.Context, *emptypb.Empty) (*GetServerLoadResponse, error)
	SetServerLoad(context.Context, *SetServerLoadRequest) (*CommonResponse, error)
	RegisterUserToCache(context.Context, *UserDetails) (*CommonResponse, error)
	UnRegisterUserFromCache(context.Context, *UserDetails) (*CommonResponse, error)
	GetUserFromCache(context.Context, *UserDetails) (*UserDetails, error)
	RegisterUserToChat(context.Context, *UserToChat) (*CommonResponse, error)
	UnRegisterUserFromChat(context.Context, *UserToChat) (*CommonResponse, error)
	GetUsersByChatId(context.Context, *ChatDetails) (*UsersByChatIdResponse, error)
	mustEmbedUnimplementedCacheServiceServer()
}

// UnimplementedCacheServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCacheServiceServer struct{}

func (UnimplementedCacheServiceServer) RegisterServer(context.Context, *ServerDetails) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterServer not implemented")
}
func (UnimplementedCacheServiceServer) UnRegisterServer(context.Context, *ServerDetails) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterServer not implemented")
}
func (UnimplementedCacheServiceServer) GetServerLoad(context.Context, *emptypb.Empty) (*GetServerLoadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerLoad not implemented")
}
func (UnimplementedCacheServiceServer) SetServerLoad(context.Context, *SetServerLoadRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetServerLoad not implemented")
}
func (UnimplementedCacheServiceServer) RegisterUserToCache(context.Context, *UserDetails) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserToCache not implemented")
}
func (UnimplementedCacheServiceServer) UnRegisterUserFromCache(context.Context, *UserDetails) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterUserFromCache not implemented")
}
func (UnimplementedCacheServiceServer) GetUserFromCache(context.Context, *UserDetails) (*UserDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFromCache not implemented")
}
func (UnimplementedCacheServiceServer) RegisterUserToChat(context.Context, *UserToChat) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUserToChat not implemented")
}
func (UnimplementedCacheServiceServer) UnRegisterUserFromChat(context.Context, *UserToChat) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnRegisterUserFromChat not implemented")
}
func (UnimplementedCacheServiceServer) GetUsersByChatId(context.Context, *ChatDetails) (*UsersByChatIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersByChatId not implemented")
}
func (UnimplementedCacheServiceServer) mustEmbedUnimplementedCacheServiceServer() {}
func (UnimplementedCacheServiceServer) testEmbeddedByValue()                      {}

// UnsafeCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CacheServiceServer will
// result in compilation errors.
type UnsafeCacheServiceServer interface {
	mustEmbedUnimplementedCacheServiceServer()
}

func RegisterCacheServiceServer(s grpc.ServiceRegistrar, srv CacheServiceServer) {
	// If the following call pancis, it indicates UnimplementedCacheServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CacheService_ServiceDesc, srv)
}

func _CacheService_RegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).RegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_RegisterServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).RegisterServer(ctx, req.(*ServerDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_UnRegisterServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).UnRegisterServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_UnRegisterServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).UnRegisterServer(ctx, req.(*ServerDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_GetServerLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetServerLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_GetServerLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetServerLoad(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_SetServerLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServerLoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).SetServerLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_SetServerLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).SetServerLoad(ctx, req.(*SetServerLoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_RegisterUserToCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).RegisterUserToCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_RegisterUserToCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).RegisterUserToCache(ctx, req.(*UserDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_UnRegisterUserFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).UnRegisterUserFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_UnRegisterUserFromCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).UnRegisterUserFromCache(ctx, req.(*UserDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_GetUserFromCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetUserFromCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_GetUserFromCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetUserFromCache(ctx, req.(*UserDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_RegisterUserToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserToChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).RegisterUserToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_RegisterUserToChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).RegisterUserToChat(ctx, req.(*UserToChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_UnRegisterUserFromChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserToChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).UnRegisterUserFromChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_UnRegisterUserFromChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).UnRegisterUserFromChat(ctx, req.(*UserToChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheService_GetUsersByChatId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheServiceServer).GetUsersByChatId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CacheService_GetUsersByChatId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServiceServer).GetUsersByChatId(ctx, req.(*ChatDetails))
	}
	return interceptor(ctx, in, info, handler)
}

// CacheService_ServiceDesc is the grpc.ServiceDesc for CacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cache.cache_service",
	HandlerType: (*CacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterServer",
			Handler:    _CacheService_RegisterServer_Handler,
		},
		{
			MethodName: "UnRegisterServer",
			Handler:    _CacheService_UnRegisterServer_Handler,
		},
		{
			MethodName: "GetServerLoad",
			Handler:    _CacheService_GetServerLoad_Handler,
		},
		{
			MethodName: "SetServerLoad",
			Handler:    _CacheService_SetServerLoad_Handler,
		},
		{
			MethodName: "RegisterUserToCache",
			Handler:    _CacheService_RegisterUserToCache_Handler,
		},
		{
			MethodName: "UnRegisterUserFromCache",
			Handler:    _CacheService_UnRegisterUserFromCache_Handler,
		},
		{
			MethodName: "GetUserFromCache",
			Handler:    _CacheService_GetUserFromCache_Handler,
		},
		{
			MethodName: "RegisterUserToChat",
			Handler:    _CacheService_RegisterUserToChat_Handler,
		},
		{
			MethodName: "UnRegisterUserFromChat",
			Handler:    _CacheService_UnRegisterUserFromChat_Handler,
		},
		{
			MethodName: "GetUsersByChatId",
			Handler:    _CacheService_GetUsersByChatId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache_service.proto",
}
